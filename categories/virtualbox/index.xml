<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Virtualbox on taewan&#39;s blog</title>
    <link>http://taewan.kim/categories/virtualbox.html</link>
    <description>Recent content in Virtualbox on taewan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Feb 2016 20:47:54 +0900</lastBuildDate>
    <atom:link href="http://taewan.kim/categories/virtualbox.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>내 친구 Vagrant를 소개합니다.</title>
      <link>http://taewan.kim/blog/2016/02/06/vagrant_intro/</link>
      <pubDate>Sat, 06 Feb 2016 20:47:54 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2016/02/06/vagrant_intro/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/Vagrant.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant는 가상화 인스턴스를 관리하는 소프트웨입니다.
Vagrant의 실체는 가상 개발 환경을 생성하고 설정하기 위한 주요 가상화 소프트웨어의 고수준 레퍼입니다.
Vagrant가 지원하는 가상화 기술은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;VMware&lt;/li&gt;
&lt;li&gt;KVM&lt;/li&gt;
&lt;li&gt;Linux Container(LXC)&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vagrant는 위에서 나열한 프로바이더 기술을 기반으로하여 가상화 인스턴스를 효과적으로 생성하고, 일관성을 유지하면서 관리하는 방안을 제공합니다.
Vagrant의 가장 매력적인 부분은 가상 인스턴스를 만들고 실행하는 과정이 매우 빠르고 편리하다는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/Vagrantup.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant의 사전적인 의미는 &amp;ldquo;부랑자&amp;rdquo;/&amp;ldquo;정처없는 사람&amp;rdquo; 이라는 사전적인 의미를 갖습니다.
Vagrant는 가상화 이미지를 효과적으로 만들고 테스트하는 유연한 환경이라는 의미로 명명된 것으로 생각됩니다. 쉽게 만들고 쉽게 버릴수 있고 다시 그 상태를 순쉽게 복원할 수 있는 &amp;ldquo;Code as a Infrastructure&amp;rdquo; 개념을 가장 쉽게 반영한 오픈소스 프로젝트입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/vagrant_chilling.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vagrant-프로젝트:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 프로젝트&lt;/h2&gt;

&lt;p&gt;Vagrant는  2010년 3월에 &amp;ldquo;Mitchell Hashimoto&amp;rdquo;가 시작한 오픈소스 프로젝트입니다.
2016년 2월 현재 최신 버전은 1.8.1입니다. 개발 언어는 Ruby이며 지원 플랫폼은 Linux, FreeBDS, OS X와 MS Window입니다. Vagrant의 주요 개발사는 HashiCorp입니다. HasiCorp는 샌프란시스코에 위치한 오픈소스 기업으로 2012년에 &amp;ldquo;Mitchell Hashimoto&amp;rdquo;가 설립하였습니다.&lt;/p&gt;

&lt;p&gt;Vagrant는 최초에 VirtualBox만을 지원하는 형태로 개발되었습니다. 그후 1.1버전 부터 다른 가상화 기술을 지원하기 시작했습니다. VMware와 KVM은 1.1버전에서 지원이 추가되었습니다. 1.6버전부터 Docker를 지원하게 되었습니다.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-설치:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 설치&lt;/h2&gt;

&lt;p&gt;앞에서 설명한 것처럼 Vagrant는 여러 가상화 프로바이더를 지원하는 툴입니다.
따라서 Vagrant를 설치하기 앞서 앞으로 사용할 가상화 프로바이더를 사전에 설치해야 합니다.&lt;/p&gt;

&lt;p&gt;Vagrant의 기본 가상화 프로바이더는 VirtualBox입니다.
VirtaulBox는 오라클가 프리웨어로 제공하는 가상화 기술입니다. 지원하는 운영체제는 Window, OS X, Linux, Solaris입니다. VirtualBox 설치 파일은 &lt;a href=&#34;https://www.virtualbox.org&#34;&gt;https://www.virtualbox.org&lt;/a&gt; 에서 다운받을 수 있습니다. VirtualBox 설치 파일의 크기는 운영체제에 따라 약간의 차이는 있지만 약 100Mb 내외 입니다.&lt;/p&gt;

&lt;p&gt;Vagrant는 Ruby로 개발된 소프트웨어 입니다. 따라서 RubyGem으로 설치 가능합니다. 그러나 Vagrant 프로젝트에서는 RubyGem을 이용한 설치 보다는 Vargant 홈페지이에서 바이너리를 다운로드 하는 것을 권장하고 있습니다. RubyGem을 사용할 경우 이전 버전이 설치될 가능성이 높기 때문입니다. Vagrant 다운로드 URL은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다운받은 Vagrant 설치 파일로 부터 설치를 완료한 후, Vagrant의 설치는 다음과 같은 명령으로 확인 할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taewan:demo taewan$ vagrant version
Installed Version: 1.8.1

Vagrant was unable to check for the latest version of Vagrant.
Please check manually at http://www.vagrantup.com
taewan:demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vagrant-간단-둘러보기:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 간단 둘러보기&lt;/h2&gt;

&lt;p&gt;Vagrant Quick-Start를 하기 앞서 간단히 Vagrant 가 동작하는 방식에 대하여 알아보겠습니다.
Vagrant는 일반적으로 다음과 같은 단계로 작업을 수행합니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Box 이미지 다운로드&lt;/li&gt;
&lt;li&gt;Box이미지를 이용하여 프로젝트 생성&lt;/li&gt;
&lt;li&gt;프로젝트 최상위 디렉터리에 위치한 Vagrantfile 파일 수정&lt;/li&gt;
&lt;li&gt;프로젝트의 가상 인스턴스 시작&lt;/li&gt;
&lt;li&gt;가상 이미지 접속 및 작업&lt;/li&gt;
&lt;li&gt;가상 이미지 종료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vagrant는 프로젝트를 생성하기 앞서 여러 프로젝트가 공통적으로 사용할 Box를 다운로드합니다.
Box란 Vagrant에서 가상 이미지로 사용할 수 있도록 초기 설정된 바이너리 입니다.
Vagrant의 메인 개발사인 hashicorp는 여러 운영체제로 만든 Box를 제공합니다.
hasicorp의 &amp;ldquo;Atlas box catalog&amp;rdquo;에서 Box를 검색하고 다운로드 할 수 있습니다.
Box를 검색하고 다운로드를 지원하는 &amp;ldquo;Atlas box catalog&amp;rdquo;의 URL은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/atlas.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Atlas box catalog&amp;rdquo; 혹은 Box의 URL을 통해서 &amp;ldquo;vagrant box add&amp;rdquo; 명령으로 Box를 다운로드 할 수 있습니다.
다운받은 기본 Box는 ~/vagrant.d/boxes 디렉터리에 저장됩니다.
이 디렉터리에는 Box별로 프로바이더 별로 4개의 파일이 저장됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;taewan:demo taewan$ vagrant box add  ubuntu/trusty64
==&amp;gt; box: Loading metadata for box &#39;ubuntu/trusty64&#39;
    box: URL: https://atlas.hashicorp.com/ubuntu/trusty64
==&amp;gt; box: Adding box &#39;ubuntu/trusty64&#39; (v20160206.0.0) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20160206.0.0/providers/virtualbox.box
==&amp;gt; box: Successfully added box &#39;ubuntu/trusty64&#39; (v20160206.0.0) for &#39;virtualbox&#39;!
taewan:demo taewan$ vagrant box list
ubuntu/trusty64 (virtualbox, 20160206.0.0)
taewan:demo taewan$ 
taewan:demo taewan$ ls -al ~/.vagrant.d/boxes/
total 0
drwxr-xr-x  3 taewan  staff  102  2 10 00:00 .
drwxr-xr-x  9 taewan  staff  306  2 10 00:00 ..
drwxr-xr-x  4 taewan  staff  136  2 10 00:00 ubuntu-VAGRANTSLASH-trusty64
taewan:demo taewan$ tree ~/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64/
/Users/taewan/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64/
├── 20160206.0.0
│   └── virtualbox
│       ├── Vagrantfile
│       ├── box-disk1.vmdk
│       ├── box.ovf
│       └── metadata.json
└── metadata_url

2 directories, 5 files
taewan:demo taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant는 가상 이미지 관리하기 위해서 프로젝트를 만듭니다.
각 프로젝트의 최상위 디렉터리에는 Vagrantfile 파일이 위치합니다.
이 파일은 Vagrant로 관리되는 가상 이미지 설정을 포함합니다.&lt;/p&gt;

&lt;p&gt;프로젝트 최상위 디텍터리에서 &amp;ldquo;vagrant up&amp;rdquo; 명령을 최초로 실행하면 vagrant는 &amp;ldquo;~/vagrant.d/boxes&amp;rdquo;에 위치한 box 이미지를 복사하여 지정된 프로바이더에 맞는 가상 이미지를 생성하고 Guest OS를 실행합니다.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-5분-실습:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 5분 실습&lt;/h2&gt;

&lt;p&gt;Vagrant로 CentOS 가상 인스턴스를 만들고 로그인하여 사용하는 간단한 데모를 진행하겠습니다.&lt;/p&gt;

&lt;h3 id=&#34;box-이미지-카탈로그-조회:47d9242757fa168a76ca0788ab673199&#34;&gt;Box 이미지 카탈로그 조회&lt;/h3&gt;

&lt;p&gt;현재 호스트 머신에 설치된 Box이미지의 목록을 조회합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;demo taewan$ vagrant box list
ubuntu/trusty64 (virtualbox, 20160206.0.0)
demo taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;현재 호스트 머신에는 CentOS 이미지가 없는 것을 확인 할 수 있습니다.
&amp;ldquo;Atlas box catalog&amp;rdquo;에서 CentOS를 검색합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/box_catalog_centos.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;위 검색 결과에서 &amp;ldquo;centos/7&amp;rdquo;을 사용할 것을 결정합니다.&lt;/p&gt;

&lt;h3 id=&#34;box-이미지-다운로드:47d9242757fa168a76ca0788ab673199&#34;&gt;Box 이미지 다운로드&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;vagrant box add&amp;rdquo; 명령으로 앞으로 사용할 CentOS 기본 이미지를 다운로드 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;demo taewan$ vagrant box add centos/7
==&amp;gt; box: Loading metadata for box &#39;centos/7&#39;
    box: URL: https://atlas.hashicorp.com/centos/7
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) libvirt
2) virtualbox

Enter your choice: 2
==&amp;gt; box: Adding box &#39;centos/7&#39; (v1509.01) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/centos/boxes/7/versions/1509.01/providers/virtualbox.box
==&amp;gt; box: Successfully added box &#39;centos/7&#39; (v1509.01) for &#39;virtualbox&#39;!
demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치가 완료되면 &amp;ldquo;vagrant box list&amp;rdquo;명령으로 설치 결과를 확인할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;demo taewan$ vagrant box list
centos/7        (virtualbox, 1509.01)
ubuntu/trusty64 (virtualbox, 20160206.0.0)
demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-프로젝트-생성-및-설정-파일-확인:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 프로젝트 생성 및 설정 파일 확인&lt;/h3&gt;

&lt;p&gt;Vagrant 프로젝트를 생성할 디렉터리를 생성한 후 Vagrant 프로젝트 초기화를 수행합니다.
프로젝트 초기화 명령(vagrant init)을 실행할 때 사용할 box를 지정할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ pwd
/Users/taewan/workspace
workspace taewan$ vagrant init centos/7
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
workspace taewan$ ls
Vagrantfile
workspace taewan$ tree
.
└── Vagrantfile

0 directories, 1 file
workspace taewan$ cat Vagrantfile 
# 주석 제거
Vagrant.configure(2) do |config|
  config.vm.box = &amp;quot;centos/7&amp;quot;
end
workspace taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-가상-이미지-실행-및-ssh-접근:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 가상 이미지 실행 및 ssh 접근&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;vagrant up&amp;rdquo;명령으로 가상 이미지를 실행하고 &amp;ldquo;vagrant ssh&amp;rdquo;명령으로 가상 이미지에 ssh 접근이 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ vagrant up
Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; default: Importing base box &#39;centos/7&#39;...
==&amp;gt; default: Matching MAC address for NAT networking...
==&amp;gt; default: Checking if box &#39;centos/7&#39; is up to date...
==&amp;gt; default: Setting the name of the VM: workspace_default_1455162125926_16977
==&amp;gt; default: Clearing any previously set network interfaces...
==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==&amp;gt; default: Forwarding ports...
    default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: 
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default: 
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it&#39;s present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; default: Machine booted and ready!
==&amp;gt; default: Checking for guest additions in VM...
    default: No guest additions were detected on the base box for this VM! Guest
    default: additions are required for forwarded ports, shared folders, host only
    default: networking, and more. If SSH fails on this machine, please install
    default: the guest additions and repackage the box to continue.
    default: 
    default: This is not an error message; everything may continue to work properly,
    default: in which case you may ignore this message.
==&amp;gt; default: Installing rsync to the VM...
==&amp;gt; default: Rsyncing folder: /Users/taewan/workspace/ =&amp;gt; /home/vagrant/sync
workspace taewan$ vagrant ssh
[vagrant@localhost ~]$ uname -a
Linux localhost.localdomain 3.10.0-229.14.1.el7.x86_64 #1 SMP Tue Sep 15 15:05:51 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
workspace taewan$  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh-config-파일-수정:47d9242757fa168a76ca0788ab673199&#34;&gt;ssh config 파일 수정&lt;/h3&gt;

&lt;p&gt;간편한 접근을 위하여 vagant는 ssh config 설정을 제공하는 명령을 제공합니다.
&amp;ldquo;vagrant ssh-config &amp;ndash;host [hostname]&amp;rdquo; 명령으로 ssh config를 위한 내용을 확인할 수 있습니다.
이 결과는 리다이렉션을 이용하여 ~/.ssh/config에 적용할 수 있습니다.
ssh config가 적용된 이후에는 ssh [hostname]으로 접근 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ # ssh config 설정 확인
workspace taewan$ vagrant ssh-config --host demo 
Host demo
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile &amp;quot;/Users/taewan/workspace/.vagrant/machines/default/virtualbox/private_key&amp;quot;
  IdentitiesOnly yes
  LogLevel FATAL

workspace taewan$ # ssh config 적용
workspace taewan$ vagrant ssh-config --host demo &amp;gt;&amp;gt; ~/.ssh/config
workspace taewan$ # ssh 접근
workspace taewan$ ssh demo
Last login: Wed Feb 10 22:43:45 2016 from 10.0.2.2
[vagrant@localhost ~]$ uname -a
Linux localhost.localdomain 3.10.0-229.14.1.el7.x86_64 #1 SMP Tue Sep 15 15:05:51 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
workspace taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-상태-확인-및-종료:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 상태 확인 및  종료&lt;/h3&gt;

&lt;p&gt;다음 명령으로 Vagrant 인스턴스의 상태를 확인하고 종료할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ # 인스턴스 상태 확인
workspace taewan$ vagrant status
Current machine states:

default                   running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
workspace taewan$ # 인스턴스 종료
workspace taewan$ vagrant destroy
    default: Are you sure you want to destroy the &#39;default&#39; VM? [y/N] y
==&amp;gt; default: Forcing shutdown of VM...
==&amp;gt; default: Destroying VM and associated drives...
workspace taewan$ # 인스턴스 상태 확인
workspace taewan$ vagrant status
Current machine states:

default                   not created (virtualbox)

The environment has not yet been created. Run `vagrant up` to
create the environment. If a machine is not created, only the
default provider will be shown. So if a provider is not listed,
then the machine is not created for that environment.
taewanui-MacBook-Pro:workspace taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vagrant-명령-요약:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 명령 요약&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;vagrant -v : 버전 확인&lt;/li&gt;
&lt;li&gt;vagrant status : 현재 프로젝트의 가상 이미지 상태 요약&lt;/li&gt;
&lt;li&gt;vagrant global-status : 호스트 머신 전체의 Vagrant 가상 이미지들의 상태 확인&lt;/li&gt;
&lt;li&gt;vagrant up : Vagrant 가상 이미지 시작&lt;/li&gt;
&lt;li&gt;vagrant halt : 가상 인스턴스 강제 종료&lt;/li&gt;
&lt;li&gt;vagrant destroy : 가상 이미지 종료 및 기존 이미지 삭제&lt;/li&gt;
&lt;li&gt;vagrant suspend : 가상 인스턴스 하이버네이트, 상태 보존&lt;/li&gt;
&lt;li&gt;vagrant resume : 중지된 인스턴스 시작&lt;/li&gt;
&lt;li&gt;vagrant reload : 변경된 VagrantFile 적용&lt;/li&gt;
&lt;li&gt;vagrant ssh : 현재 프로젝트의 가상 이미지에 ssh 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference:47d9242757fa168a76ca0788ab673199&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/wpscholar/a49594e2e2b918f4d0c4&#34;&gt;https://gist.github.com/wpscholar/a49594e2e2b918f4d0c4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34;&gt;https://www.vagrantup.com/docs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VirtualBox: 호스트에서 게스트 접근 네트웍 설정</title>
      <link>http://taewan.kim/blog/2016/01/31/virtualvox_network_config/</link>
      <pubDate>Sun, 31 Jan 2016 12:42:43 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2016/01/31/virtualvox_network_config/</guid>
      <description>

&lt;p&gt;최근에는 VirtualBox 이미지로 테스트 환경을 구성하거나 배포하는 경우가 많아졌습니다.
특히 오라클에서는 초기 테스트 및 교육 목적으로 다수의 VirtualBox 이미지를 배포하고 있습니다.
이렇게 만들어진 이미지를 사용할 경우 사용자는 새로운 기술을 접할 때 경험해야 하는 설치 및 구성에 대한 난제를 해결 할 수 있습니다.
즉 사용자는 새로운 기술의 기능 테스트 및 활용에 집중할 수 있게됩니다.&lt;/p&gt;

&lt;p&gt;오라클이 제공하는 VirtualBox 이미지는 Oracle Big Data Lite입니다.
Oracle Big Data Lite는 오라클의 빅데이터 소프트웨어 (CHD배포본 + Orale Software)의 최신 구성을 하나의 VirtualBox 이미지에 담아서 제공합니다.
이 이미지의 최신 버전은 4.3.X (2016.01 기준) 입니다.
Oracle Big Data Lite는 완전한 설정이 반영된 이미지이기 때문에, 사용자는 설치 및 번거로운 작업을 거치지 않고 바로 기능 테스트를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/BigDataLite-Initial.png&#34; alt=&#34;BigDataLite&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;호스트에서-가상화-이미지에-접근할-수-있다면:e504ff6a47b9ec67ec6136666189d988&#34;&gt;호스트에서 가상화 이미지에 접근할 수 있다면&amp;hellip;&lt;/h2&gt;

&lt;p&gt;VirtualBox를 통해서 이미지를 실행한 후에는 VirtualBox가 제공하는 윈도우를 통해서 Guest OS에 접근을 할 수 있습니다.
그러나 Guest OS를 윈도우로 접근하는 방식은 비 효율적입니다.
Guest OS가 리눅스라면 VirtualBox가 구동하는 호스트에서 터미널로 Guest OS에 접근하여 작업하는 것이 더 효율적 입니다.
VirtualBox에 &amp;ldquo;Host Only Adapter&amp;rdquo;를 설정하면, Host OS에서 Guest OS에 접근할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;virtualbox의-host-only-adapter-설정:e504ff6a47b9ec67ec6136666189d988&#34;&gt;VirtualBox의 Host Only Adapter 설정&lt;/h2&gt;

&lt;p&gt;Host Only Adapter 설정은 VirtualBox 레벨에서 &amp;ldquo;새 호스트 전용 네트워크&amp;rdquo; 설정 단계와 Guest OS에서 Host Only Adapter 설정 단계로 구분됩니다.&lt;/p&gt;

&lt;h3 id=&#34;새-호스트-전용-네트워크-설정:e504ff6a47b9ec67ec6136666189d988&#34;&gt;새 호스트 전용 네트워크 설정&lt;/h3&gt;

&lt;p&gt;OS X를 기준으로 메뉴:VirtualBox -&amp;gt; 환경설정 -&amp;gt; 네트워크 텝 -&amp;gt; &amp;ldquo;호스트 전용 네트워크&amp;rdquo;에서 오른쪽의 &amp;ldquo;+&amp;ldquo;아이콘을 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/hostonlynetwork.png&#34; alt=&#34;Host Only Networks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;rdquo;+&amp;ldquo;아이콘을 선택하면 &amp;ldquo;vboxnet0&amp;rdquo;가 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vboxnet0.png&#34; alt=&#34;vboxnet0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;vboxnet0&amp;rdquo;를 더블클릭하여 아래와 같이 DHCP 설정을 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서버사용: 선택&lt;/li&gt;
&lt;li&gt;서버주소: 192.168.56.100&lt;/li&gt;
&lt;li&gt;서버마스크: 255.255.255.0&lt;/li&gt;
&lt;li&gt;최저주소한계: 192.168.56.101&lt;/li&gt;
&lt;li&gt;최고주소한계: 192.168.56.154&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/dscp.png&#34; alt=&#34;vboxnet0&#34; /&gt;
위와 같이 설정을 마치고 &amp;ldquo;저장&amp;rdquo;&amp;rdquo; 및 &amp;ldquo;확인&amp;rdquo;&amp;rdquo; 버튼을 클릭하여 네트워크 등록을 완료합니다.&lt;/p&gt;

&lt;h3 id=&#34;guest-os에-adapter-추가-host-only-adapter:e504ff6a47b9ec67ec6136666189d988&#34;&gt;Guest OS에 Adapter 추가 (Host Only Adapter)&lt;/h3&gt;

&lt;p&gt;Guest OS 선택 후 설정 메뉴 오픈, 네트워크 텝-&amp;gt;어탭터2를 선택하고 다음과 같은 설정을 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;네트워크 어뎁터 사용하기: 선택&lt;/li&gt;
&lt;li&gt;다음에 연결: Host Only Adapter 선택&lt;/li&gt;
&lt;li&gt;이름: vboxnet0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/adapter2.png&#34; alt=&#34;adapter2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;새-호스트-전용-네트워크-설정-1:e504ff6a47b9ec67ec6136666189d988&#34;&gt;새 호스트 전용 네트워크 설정&lt;/h3&gt;

&lt;p&gt;Guest OS에 로그인하여 네트웍 정보를 확인 합니다.
terminal 상에서 ifconfig 명령으로 호스트에서 접근 할 IP를 확인할 수 있습니다.
(192.168.56.101)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/ipcheck.png&#34; alt=&#34;ipcheck&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;host-os에서-guest-os에-접근:e504ff6a47b9ec67ec6136666189d988&#34;&gt;Host OS에서 Guest OS에 접근&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ssh 접근 결과&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taewanui-MacBook-Pro:demo taewan$ ssh oracle@192.168.56.101
oracle@192.168.56.101&#39;s password: 
Last login: Thu Jan 28 16:00:34 2016 from 192.168.56.1
[oracle@bigdatalite ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;hue 접근 결과

&lt;ul&gt;
&lt;li&gt;Big Data Lite는 8888포트로 Hue를 제공합니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/hue.png&#34; alt=&#34;ipcheck&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;요약:e504ff6a47b9ec67ec6136666189d988&#34;&gt;요약&lt;/h2&gt;

&lt;p&gt;VirtualBox에 Host Only Network를 추가하고 DHCP를 설정한 후 Guest OS에 Host Only Adapter를 등록하면 Host OS에서 Guest OS에 네트웍 접근이 가능합니다. 설정 절차를 요약하면 다음곽 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox에 Host Only Network 추가

&lt;ul&gt;
&lt;li&gt;추가된 네트워크에 DHCP 설정&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;접근할 Guest OS에 네트웍 어뎁터 추가

&lt;ul&gt;
&lt;li&gt;Host Only Adapter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Guest OS에 로그인하여 접속 IP체크

&lt;ul&gt;
&lt;li&gt;ifconfig command in terminal&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Host OS에서 Guest OS에 접근&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>