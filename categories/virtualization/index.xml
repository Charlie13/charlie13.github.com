<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Virtualization on taewan&#39;s blog</title>
    <link>http://taewan.kim/categories/virtualization.html</link>
    <description>Recent content in Virtualization on taewan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Oct 2016 10:27:49 +0900</lastBuildDate>
    <atom:link href="http://taewan.kim/categories/virtualization.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>오라클 IaaS를 이용한 VM 인스턴스 생성</title>
      <link>http://taewan.kim/blog/2016/10/12/iaas_quick/</link>
      <pubDate>Wed, 12 Oct 2016 10:27:49 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2016/10/12/iaas_quick/</guid>
      <description>

&lt;p&gt;오라클 클라우드의 IaaS 서비스에 Ubuntu 14.04를 가상 인스턴스로 만드는 절차를 정라힙니다. 오라클 클라우드에서 가상머신을 생성하기 위해서는 Oracle Cloud의 계정이 필요합니다. 계정을 생성하는 방법에 대해서는 &lt;a href=&#34;http://taewan.kim/blog/2016/10/06/account_reg_of_oracloud/&#34;&gt;&amp;ldquo;오라클 클라우드 계정 생성하기&amp;rdquo;&lt;/a&gt; 를 참조하시기 바랍니다.&lt;/p&gt;

&lt;h2 id=&#34;oracle-cloud-vm-인스턴스-생성-실습:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Oracle Cloud VM 인스턴스 생성 실습&lt;/h2&gt;

&lt;p&gt;본 문서는 OS X(Mac) 환경에서 만들었습니다. 이 문서에서 실행한 절차를 윈도우에서 실습하실 경우에는 PUTTY와 같은 Terminal을 사용한다는 것과 SSH-KEYGEN을 사용하는 절차가 달라질 것입니다. 이 부분에 대해서는 별도 문서로 정리하겠습니다.&lt;/p&gt;

&lt;p&gt;오라클 클라우드 VM 생성 실습은 약 10~15분 정도 소요됩니다.&lt;/p&gt;

&lt;h3 id=&#34;실습-절차:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;실습 절차&lt;/h3&gt;

&lt;p&gt;오라클 클라우드에 VM을 생성하는 실습은 다음과 같은 절차되며, 각 절차는 &amp;ldquo;Step by Step&amp;rdquo;으로 설명하겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;로컬 컴퓨터 ssh key 생성&lt;/li&gt;
&lt;li&gt;Oracle Cloud 로그인&lt;/li&gt;
&lt;li&gt;Compute Cloud Service Console 이동&lt;/li&gt;
&lt;li&gt;Network 설정

&lt;ul&gt;
&lt;li&gt;Public Key 등록&lt;/li&gt;
&lt;li&gt;Public IP 생성&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VM Instance 생성&lt;/li&gt;
&lt;li&gt;Security Rule 등록 (for SSH)&lt;/li&gt;
&lt;li&gt;VM 로그인 및 nginx 설치&lt;/li&gt;
&lt;li&gt;Security 등록 및 브라우저 접근&lt;/li&gt;
&lt;li&gt;VM 인스턴스 정지&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;oracle-cloud-vm-생성:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Oracle Cloud VM 생성&lt;/h2&gt;

&lt;h3 id=&#34;step01-로컬-컴퓨터-ssh-key-생성:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step01: 로컬 컴퓨터 ssh key 생성&lt;/h3&gt;

&lt;p&gt;Oracle Public Cloud(이하 OPC)에 가상 머신을 생성하면, 터미널에서 ssh로 VM 인스턴스(이하 인스턴스)에 접근하게 됩니다.
OPC에 VM을 생성하는 과정은 접속할 컴퓨터를 인증하는 용도로 사용될 public key를 등록하는 것을 포함합니다.&lt;/p&gt;

&lt;p&gt;리눅스와 OS X에서는 ssh 명령에서 사용할 암호화 키를 다음과 같은 명령으로 생성합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[그림 1]은 ssh-keygen 명령으로 암호화 키를 생성하는 스크린 샷입니다.
ssh-keygen 명령으로 암호화 키를 생성할때 기본 파일 생성 디렉터리와 파일명은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;기본 디렉터리: &lt;USER_HOME&gt;/.ssh/&lt;/li&gt;
&lt;li&gt;기본 파일명: id_rsa / id_rsa.pub&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taewan@.ssh $pwd
/Users/taewan/.ssh
taewan@.ssh $ls -al
drwx------   24 taewan  staff   816 10 11 15:15 .
drwxr-xr-x+ 147 taewan  staff  4998 10 11 15:15 ..
-rw-------    1 taewan  staff  1675 10 11 13:58 id_rsa
-rw-------    1 taewan  staff   415 10 11 13:58 id_rsa.pub
taewan@.ssh $
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;그림 1. ssh-keygen 명령을 이용한 암호화키 생성
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step010.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ssh-keygen 명령으로 생성된 파일 중 확장자가 pub인 파일이 공개키 입니다.
[그림 1]에서 생성한 id_rsa.pub에 포함된 내용은 OPC에 등록되며, 이 정보는 향후 해당 인스턴스의 운영체제 접속시점에 사용 됩니다.
id_ras.pub에 저장되어 있는 내용은 [그림 2]와 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 2. ssh-keygen으로 생성한 공개키
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step020.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step02-oracle-cloud-로그인:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step02: Oracle Cloud 로그인&lt;/h3&gt;

&lt;p&gt;OPC에 인스턴스를 생성하기 위해서 &lt;a href=&#34;http://cloud.oracle.com&#34;&gt;http://cloud.oracle.com&lt;/a&gt; 에 로그인 합니다.
[그림 3]에서 &amp;ldquo;sign in&amp;rdquo;을 클릭하면 리전을 선택하는 페이지로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 3. &lt;a href=&#34;http://cloud.oracle.com&#34;&gt;http://cloud.oracle.com&lt;/a&gt; 메인 페이지
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step030.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;로그인에 앞서 인스턴스를 생성할 region을 선택합니다.
&lt;strong&gt;Free trial&lt;/strong&gt; 계정의 경우 [그림 4]와 같이 &lt;strong&gt;Public Cloud Services - US&lt;/strong&gt; 를 선택해야 합니다.
리전을 선택하고 &lt;strong&gt;My Services&lt;/strong&gt; 버튼을 클릭하면, 로그인 페이지로 이동하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 4. &lt;a href=&#34;http://cloud.oracle.com&#34;&gt;http://cloud.oracle.com&lt;/a&gt; 메인 페이지
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step040.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OPC 로그인을 위해서 [그림 5]와 [그림 6]과 같이 도메인 ID, 계정 ID, 패스워드를 입력합니다.
[그림 5]에서 도메인 ID를 입력하고 &lt;strong&gt;실행&lt;/strong&gt; 버튼을 클릭하면 계정 ID/패스워드 입력 페이지로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 5. 도메인 ID 입력
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step050.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 6]과 같이 계정 ID/패스워드을 입력하고 &lt;strong&gt;사인인&lt;/strong&gt; 버튼을 클릭하면 로그인이 수행됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 6. 로그인 정보 입력
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step060.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;로그인이 정상적으로 수행되면 [그림 7]과 같은 &lt;strong&gt;Oracle Cloud My Services Dashboard&lt;/strong&gt; 가 출력됩니다.&lt;/p&gt;

&lt;h3 id=&#34;step03-compute-cloud-service-console-이동:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step03: compute Cloud Service Console 이동&lt;/h3&gt;

&lt;p&gt;Dashboard 페이지에서는 [그림 7]과 같이 각 클라우드 서비스으로 이동 가능한 블럭이 출력됩니다.
VM 인스턴스를 생성하는 &lt;strong&gt;Compute Cloud Service Console(이하 compute console)&lt;/strong&gt; 로 이동하기 위해서 Dashboard의 왼쪽 상단의 메뉴 아이콘을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 7. Dashboard 페이지의 메뉴 아이콘 선택
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step070.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 7]에서 메뉴 아이콘을 클릭하면 왼측에서 [그림 8]과 같이 각 서비스 콘솔과 모니터링 콘솔 페이지로의 이동을 지원하는 메뉴가 출력됩니다.
출력된 메뉴 중에서 &lt;strong&gt;compute&lt;/strong&gt; 를 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 8. Compute 서비스 선택
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step080.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step04-네트워크-설정:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step04: 네트워크 설정&lt;/h3&gt;

&lt;p&gt;Comput Console에서 네트워크 텝을 선택하여 [그림 9]와 같이 네트워크 설정 페이지로 이동합니다.
네트워크 설정 페이지 에서는 Security Rule, Security List, Security Application, Security IP List, IP Reservation, SSH Public Key를 설정할 수 있습니다.
다음은 설정 메뉴에 대한 요약입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security List: 보안 대상 서버 그룹 설정, 일종의 방화벽 구성&lt;/li&gt;
&lt;li&gt;Security Rule: 보안 대상 서버 그룹에 설정할 보안 룰 정의&lt;/li&gt;
&lt;li&gt;Security Application: Security Rule에서 사용할 포트 정보 등록 및 관리&lt;/li&gt;
&lt;li&gt;Security IP List: 현재 계정이 관리히지 않는 외부 시스템의 IP 목록 관리&lt;/li&gt;
&lt;li&gt;IP Reservation: Public IP 생성 및 관리&lt;/li&gt;
&lt;li&gt;SSH Public Key: SSH Public Key 등록&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네트워크 설정 관련해서는 별도의 문서로 정리하겠습니다. 본 문서에서는 이 중에서 IP Reservation과 SSH Public Key만을 사용할 것입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 9. Compute Cloud Service Console
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step090.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ssh-public-key-등록:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;SSH Public Key 등록&lt;/h4&gt;

&lt;p&gt;앞에서 생성한 SSH 공개키(그림 2 참조)의 내용을 등록해야 합니다. 여기에서 등록한 public키는 VM 생성시 인스턴스에 할당되고,
향후에 터미널을 통해서 ssh를 이용하여 시스템에 접근할 때 사용됩니다.&lt;/p&gt;

&lt;p&gt;네트워크 페이지에서 SSH 공개키[그림 10]와 같이 &lt;strong&gt;SSH Public Keys&lt;/strong&gt; 를 선택하여 SSH Public Key 등록 페이지로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 10. SSH Public Keys 페이지 이동
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step100.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 11]과 같이 &lt;code&gt;Add SSH Public Key&lt;/code&gt;을 클릭하면 [그림 12]와 같이 SSH Public Key 등록 폼이 출력됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 11. SSH Public Keys 추가 버튼 클릭
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step110.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 2]에서 생성한 공개키 파일의 내용을 복사하여 [그림 12]의 등록 폼에 입력하고,
공개키 이름을 입력한 후 &amp;ldquo;Add&amp;rdquo; 버튼을 클릭하면 공개키 등록 절차는 완료 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 12. SSH Public 등록 폼
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step120.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공개키 등록이 완료되면 [그림 13]과 같이 공개키가 등록된 결과를 확인 할 수 있습니다. 이제 &lt;code&gt;IP Reservation&lt;/code&gt; 메뉴를 클릭하여
IP Reserverion 페이지로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 13. 공개 키 등록 확인 및 IP Reservation 페이지로 이동
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step130.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;public-ip-생성:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Public IP 생성&lt;/h4&gt;

&lt;p&gt;VM을 관리함에 있어서 Public IP를 예약하고 재사용하는 것이 편리합니다.
Public IP를 예약하지 않을 경우 VM을 재시작 할 때 마다 새로운 Public IP가 설정됩니다.
VM 인스턴스를 효과적으로 관리하기 위해서는 Public IP를 사전에 생성하고, 인스턴스에 할당해야 합니다.&lt;/p&gt;

&lt;p&gt;[그림 14]와 같이 &lt;code&gt;Create IP Reservation&lt;/code&gt; 버튼을 클릭하면 공개 IP 설정 폼이 출력 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 14. Public IP를 생성하기 위한 &lt;code&gt;Create IP Reservation&lt;/code&gt; 클릭
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step140.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성할 공개 IP에 할당 될 IP 명을 입력하고 &lt;code&gt;Create&lt;/code&gt; 버튼을 클릭하면 IP 생성은 완료됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 15. IP 명 설정 및 생성
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step150.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공개 IP 생성이 완료되면, [그림 16]과 같이 생성된 공개 IP를 목록에서 확인할 수 있습니다.
이제 VM Instance를 생성하기 위해서 상단의 &lt;strong&gt;Instances&lt;/strong&gt; 텝을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 16. 공개 IP 목록
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step160.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step04-vm-인스턴스-생성:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step04: VM 인스턴스 생성&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Create Instance&amp;rdquo; 버튼을 클릭하여 인스턴스 생성 페이지로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 17. &amp;ldquo;Create Instance&amp;rdquo; 버튼 클릭
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step170.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Boot Images 선택 페이지로 이동합니다. OPC는 3가지의 유형의 Images를 제공합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle Images: 오라클 공식 VM 이미지 (Oracle Enterprise Linux)&lt;/li&gt;
&lt;li&gt;Private Images: 사용자 등록 이미지&lt;/li&gt;
&lt;li&gt;Marketplaces: 마켓 등록 이미지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ubuntu Boot Image를 선택하기 위해서 왼쪽 메뉴에서 &amp;ldquo;Marketplaces&amp;rdquo;를 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 18. Marketplaces 이동 메뉴
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step180.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marketplaces에는 2016/10/13 현재 335개의 boot 이미지가 등록되어 있습니다.
필요한 이미지는 [그림 19]와 같이 검색이 가능합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 19. Marketplaces의 검색 기능
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step190.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 20]과 같이 검색어로 &amp;ldquo;ubuntu&amp;rdquo;를 입력하면 ubuntu로 tagging된 모든 이미지가 조회 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 20. Marketplaces의 검색 &amp;ldquo;Ubuntu&amp;rdquo;
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step200.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;검색된 Ubuntu 이미지 중에 &amp;ldquo;Ubuntu Server 14.04 LTS amd64&amp;rdquo;를 선택하고 [그림 21]과 같이 오른쪽 상단의 &amp;ldquo;&amp;gt;&amp;rdquo; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 21. 설치 Boot 이미지 선택
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step210.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marketplaces에서 이미지를 선택하면 현재 계정의 Compute Cloud에 다운로드 됩니다. 이와 관련된 알림과 승인 창이 출력됩니다.
[그림 22]와 같이 승인 체크 박스에 체크하고 &amp;ldquo;Install&amp;rdquo;을 선택합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 22. 대상 이미지 다운로드 및 승인 확인 알림
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step220.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음으로는 인스턴스의 Shape을 선택하는 페이지로 이동합니다. [그림 23]과 같이 현재 3개의 Shape을 제공합니다.
현재는 &amp;ldquo;General Purpose&amp;rdquo;를 선택하고 오른쪽 상단의 &amp;ldquo;&amp;gt;&amp;rdquo; 버튼을 클릭합니다.
&amp;ldquo;General Purpose&amp;rdquo;는 1 ocpu / memory 7.5GB입니다. 1 OCPU는 아마존 2 vCPU와 동일한 용량을 제공합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 23. 설치할 Compute의 Shape 선택
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step240.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 24]와 같은 기본 폼이 출력됩니다.
VM Instance를 생성하기 위해서는 Name / DNS Hostname Profix / Public IP Address / SSH Key 같은 항목을 입력해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 24. VM Instance 생성 폼
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step250.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 25]와 같이 인스턴스 명, host 명을 입력합니다. 추가로 Public IP Address에 &lt;strong&gt;Persistant Public IP Reservation&lt;/strong&gt; 을 선택하면
앞에서 생성한 Public IP를 선택하는 입력 폼이 추가됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 25. &amp;ldquo;ㅜname&amp;rdquo; 지정 및 DNS Hostname Prefix 지정
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step260.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 26]과 같이 Public IP Address에는 [그림 16]에서 생성한 Public IP를 선택합니다. Security List 항목에는 기본적으로 생성된 default를 선택합니다.
그리고 SSH Key에는 [그림 13]에서 등록한 SSH 공개키를 선택합니다. 이상으로 입력이 완료되면 오른쪽 상단의 &amp;ldquo;&amp;gt;&amp;rdquo; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 26. Public IP, Security List, SSH Key 입력
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step280.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 27]은 스토리지 설정 페이징 입니다.
스토리지 관련해서는 별도의 문서로 다룰 것입니다. 지금은 기본적으로 만들어진 &amp;ldquo;demo_ubuntu_vm_storage&amp;rdquo;를 그대로 사용할 것입니다.
이제 모든 설정은 완료되었습니다. 오른쪽 상단의 &amp;ldquo;&amp;gt;&amp;rdquo; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 27. Storage 설정 페이지
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step290.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 28]은 지금까지 진행한 설정에 대한 요약을 출력합니다. 모든 정보가 맞다면 &amp;ldquo;create&amp;rdquo; 버튼을 클릭하여 인스턴스를 생성합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 28. Instance 요약
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step300.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 28]에서 &amp;ldquo;create&amp;rdquo; 버튼을 클릭하면 Instances 페이지로 이동합니다.
Instances에는 현재 인스턴스가 추가되지 않은 상태입니다.
현재 생성중인 인스턴스 상태는 Orchestrations 텝에서  확인 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 29. Orchestrations 텝 이동
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step310.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 30]과 같이 Orchestrations에는 3개의 orchestation이 등록되어 있고 2개가 동작중인 것을 확인할 수 있습니다.
각각은 master, storage, instance 용 orchestration입니다.
master는 storage와 instance orchestration을 실행하는 역할을 담당하며 storage와 instance는 차례로
스토리지를 생성하고 인스턴스를 생성하는 일련의 작업을 수행합니다.
현재 생성하는 인스턴스의 경우 전체적인 생성시간은 3~5분정도 소요됩니다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 30. Orchestrations 목록과 상태
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step320.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인스턴스 생성이 완료되면 [그림 31]과 같이 Orchestrations 목록이 모두 Ready 상태로 변경된 것을 확인 할 수 있습니다.
Orchestration이 완료되었다면 Instances 텝으로 이동합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 31. 인스턴스 생성이 완료된 Orchestrations 목록과 상태
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step330.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instances 텝에서 새로 등록된 인스턴스를 확인할 수 있습니다.
또한 인스턴스에 사전에 등록한 Public IP가 설정되어 있는 것을 확인할 수 있습니다.
현재 인스턴스에는 외부에서 접근 불가능한 상태 입니다.
외부에서 접근을 하기 위해서는 Network 텝으로 이동하여 Security Rule을 등록해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 32. 인스턴스 등록 확인
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step340.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step04-security-rule-등록-for-ssh:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step04: Security Rule 등록 (for SSH)&lt;/h3&gt;

&lt;p&gt;터미널에서 ssh로 앞에서 생성한 인스턴스에 접근하기 위해서는 ssh가 사용하는 22번 포트에 대한 보안 설정을 추가해야 합니다.
이러한 보안 설정은 Security Rule에서 설정할 수 있습니다. Network 텝의 왼쪽 메뉴에서 &amp;ldquo;Security Rule&amp;rdquo;로 이동합니다.
&amp;ldquo;Security Rule&amp;rdquo; 페이지에서 [그림 33]과 같이 &amp;ldquo;Create Security Rule&amp;rdquo; 버튼을 클릭하여 Security Rule을 추가할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 33. Security Rule 등록
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step350.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 34]는 Security Rule 등록 폼입니다. Security Rule을 등록하기 위해서는 다음과 같은 정보를 입력해야 합니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security rule 명&lt;/li&gt;
&lt;li&gt;Security Application: 포트&lt;/li&gt;
&lt;li&gt;Souece&lt;/li&gt;
&lt;li&gt;Destination&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기본적으로 위 4가지 정보를 등록해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 34. Security Rule 등록 폼
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step360.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ssh을 위한 Security Rule은 [그림 35]와 같이 입력합니다.
source의 public-internet은 모든 IP를 의미(0.0.0.0)합니다.
Destination에 설정한 default는 VM 인스턴스 생성시 할당한 값입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 35. ssh 서비스 오픈을 위한 설정
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step370.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 35]에서 &amp;ldquo;Create&amp;rdquo; 버튼을 클릭하면, [그림 36]에서 Security Rule이 생성된 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 36. Security Rule 생성
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step380.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step05-vm-로그인-및-nginx-설치:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step05: VM 로그인 및 nginx 설치&lt;/h3&gt;

&lt;p&gt;사용자 컴퓨터에서 [그림 37]과 [그림 38] 같이 다음 명령으로 앞에서 생성한 VM 인스턴스에 로그인 할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh ubuntu@129.144.152.137
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;그림 37. Ubuntu 로그인
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step390.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;그림 38. Ubuntu 로그인 결과
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step400.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ubuntu에 nginx를 설치하기 위해서는 [그림 37]과 [그림 38]과 같은 명령을 입력해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get updates
sudo apt-get install -y nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;그림 39. apt 레파지토리 업데이트
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step440.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;그림 40. nginx 설치
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step460.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nginx가 설치가 완료되면, [그림 41]과 같은 명령으로 nginx 서비스 구동 상태를 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 41. nginx 서비스 구동 상태 확인
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step470.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step06-security-등록-및-브라우저:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step06: Security 등록 및 브라우저&lt;/h3&gt;

&lt;p&gt;nginx의 서비스를 브라우저로 접근하기 위해서는 80포트에 대한 보안 설정이 필요합니다.
80 포트에 유입되는 모든 요청을 처리하기 위해서는 새로운 Security Rule을 [그림 42]와
[그림 43]과 같이 생성해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 42. 80 포트 오픈을 위한 Security Rule 생성 요청
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step480.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP/80 포트의 경우 Security Application에 사전에 만들어져 있습니다.
따라서 [그림 43]과 같이 Security Application에 http를 선택합니다.
또한 internet으로 부터 들어오는 모든 요청을 받아들이기 위해서는 source에
public-internet을 선택하고 &amp;ldquo;Create&amp;rdquo; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 43. 80 포트 오픈을 위한 Security Rule 생성
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step490.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security Rule이 정상적으로 생성될 경우 [그림 44]와 같이 Security Rules 목록을 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 44. Security Rules 목록을 확인
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step500.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security Rules가 등록되면 바로 [그림 45]와 같이 브라우저 접근이 가능합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 45. 브라우저 접근
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step510.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step07-vm-인스턴스-정지:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;Step07: VM 인스턴스 정지&lt;/h3&gt;

&lt;p&gt;OPC에 생성된 VM 인스턴스는 Orchestrations 텝에서 시작과 종료를 할 수 있습니다.
현재 인스턴스가 동작하는 상태는 [그림 46]과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 46. 인스턴스 구동시 Orchestration 상태 조회
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step520.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인스턴스를 종료하기 위해서는 [그림 48]과 같이 master orchestration의 메뉴 아이콘을 클릭하고 stop을 클릭하면 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 48. 인스턴스 셧다운을 위한 Master 종료 명령
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step530.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 인스턴스는 디폴트 스토리지를 사용하기 때문에 인스턴스 종료시 데이터가 유실될 수 있습니다.
인스턴스 종료시 데이터 유실을 방지하기 위해서는 별도의 스토리지를 생성하고 설정해야 합니다.
이 부분은 별도의 문서로 다루겠습니다.&lt;/p&gt;

&lt;p&gt;현재 인스턴스를 종료하면 [그림 49]와 같이 데이터 유실에 관한 에러 메세지가 출력됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 49. 인스턴스 종료 시 데이터 유실 경고 메세지
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step540.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[그림 49]에서 &amp;ldquo;YES&amp;rdquo;를 클릭하면 Master Orchestration이 시작하며 [그림 50] 과 같이 종료된 것을 확인할 수있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 50. 인스턴스 종료하는 Orchestration 프로세스 종료
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step550.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Orchestration이 종료디면 Instances탭의 인스턴스 정보에서 public ip가 사라진 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 51. Instance 텝에서 VM 종료 상태 확인
&lt;img src=&#34;http://taewan.kim/images/oracloud/iaas_quick/step560.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;종료된 인스턴스를 다시 시작하기 위해서는  Orchestrations 텝에서 master orchestration의 메뉴 아이콘을 클릭하고 start를 클릭하면 됩니다.&lt;/p&gt;

&lt;h2 id=&#34;마치며:7a6448865fd6548e9403a0ce293d8c64&#34;&gt;마치며&lt;/h2&gt;

&lt;p&gt;지금까지 OPC에서 Ubuntu이미지를 이용하여 VM 인스턴스를 생성하고, ssh 보안설정, 소프트웨어 설치, 80포트 보안 설정, 인스턴스 종료와 시작에 대해서 알아 보았습니다.&lt;/p&gt;

&lt;p&gt;다음 문서에서는 스토리지 및 보안 관련된 사항을 다루도록 하겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>내 친구 Vagrant를 소개합니다.</title>
      <link>http://taewan.kim/blog/2016/02/06/vagrant_intro/</link>
      <pubDate>Sat, 06 Feb 2016 20:47:54 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2016/02/06/vagrant_intro/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/Vagrant.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant는 가상화 인스턴스를 관리하는 소프트웨입니다.
Vagrant의 실체는 가상 개발 환경을 생성하고 설정하기 위한 주요 가상화 소프트웨어의 고수준 레퍼입니다.
Vagrant가 지원하는 가상화 기술은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;VMware&lt;/li&gt;
&lt;li&gt;KVM&lt;/li&gt;
&lt;li&gt;Linux Container(LXC)&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vagrant는 위에서 나열한 프로바이더 기술을 기반으로하여 가상화 인스턴스를 효과적으로 생성하고  관리 일관성을 확보하는 방안을 제공합니다.
Vagrant의 가장 매력적인 부분은 가상 인스턴스를 만들고 실행하는 과정이 매우 빠르고 편리하다는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/Vagrantup.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant의 사전적인 의미는 &amp;ldquo;부랑자&amp;rdquo;/&amp;ldquo;정처없는 사람&amp;rdquo; 이라는 사전적인 의미를 갖습니다.
Vagrant는 가상화 이미지를 효과적으로 만들고 테스트하는 유연한 환경이라는 의미에서 명명된 것이라고 생각됩니다. 쉽게 만들고 쉽게 버릴수 있고 다시 그 상태를 쉽게 복원할 수 있는 &amp;ldquo;Code as a Infrastructure&amp;rdquo; 개념을 반영한 오픈소스 프로젝트입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/vagrant_chilling.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vagrant-프로젝트:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 프로젝트&lt;/h2&gt;

&lt;p&gt;Vagrant는  2010년 3월에 &amp;ldquo;Mitchell Hashimoto&amp;rdquo;가 시작한 오픈소스 프로젝트입니다.
2016년 2월 현재 최신 버전은 1.8.1입니다. 개발 언어는 Ruby이며 지원 플랫폼은 Linux, FreeBDS, OS X와 MS Window입니다. 2016년 현재 Vagrant의 주요 개발사는 HashiCorp입니다. HasiCorp는 샌프란시스코에 위치한 오픈소스 기업으로 2012년에 &amp;ldquo;Mitchell Hashimoto&amp;rdquo;가 설립하였습니다.&lt;/p&gt;

&lt;p&gt;Vagrant는 초기에 VirtualBox만을 지원하는 형태로 개발되었습니다. 그후 1.1버전 부터 다른 가상화 기술을 지원하기 시작했습니다. VMware와 KVM은 1.1버전에서 지원이 추가되었습니다. 1.6버전에서는 Docker를 새롭게 추가하였습니다.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-설치:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 설치&lt;/h2&gt;

&lt;p&gt;앞에서 설명한 것처럼 Vagrant는 여러 가상화 프로바이더를 지원하는 툴입니다.
따라서 Vagrant를 설치하기 전에 사용할 가상화 프로바이더를 사전에 설치해야 합니다.&lt;/p&gt;

&lt;p&gt;Vagrant의 기본 가상화 프로바이더는 VirtualBox입니다.
VirtaulBox는 오라클가 프리웨어로 제공하는 가상화 기술입니다. 지원하는 운영체제는 Window, OS X, Linux, Solaris입니다. VirtualBox 설치 파일은 &lt;a href=&#34;https://www.virtualbox.org&#34;&gt;https://www.virtualbox.org&lt;/a&gt; 에서 다운받을 수 있습니다. VirtualBox 설치 파일의 크기는 운영체제에 따라 약간의 차이는 있지만 약 100Mb 내외 입니다.&lt;/p&gt;

&lt;p&gt;앞에서 설명한 것 처럼 Vagrant는 Ruby로 개발된 소프트웨어 입니다.
따라서 RubyGem으로 설치 가능합니다.
그러나 Vagrant 프로젝트에서는 RubyGem을 이용한 설치하는 방법보다 Vargant 홈페지이에서 바이너리를 다운로드 하는 것을 권장하고 있습니다. RubyGem을 사용할 경우 이전 버전이 설치될 가능성이 높기 때문입니다. Vagrant 다운로드 URL은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다운받은 Vagrant 설치 파일로 부터 설치를 완료한 후, Vagrant의 설치는 다음과 같은 명령으로 확인 할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taewan:demo taewan$ vagrant version
Installed Version: 1.8.1

Vagrant was unable to check for the latest version of Vagrant.
Please check manually at http://www.vagrantup.com
taewan:demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vagrant-간단-둘러보기:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 간단 둘러보기&lt;/h2&gt;

&lt;p&gt;Vagrant Quick-Start를 하기 앞서 간단히 Vagrant 가 동작하는 방식에 대하여 알아보겠습니다.
Vagrant는 일반적으로 다음과 같은 단계로 작업을 수행합니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Box 이미지 다운로드&lt;/li&gt;
&lt;li&gt;Box이미지를 이용하여 프로젝트 생성&lt;/li&gt;
&lt;li&gt;프로젝트 최상위 디렉터리에 위치한 Vagrantfile 파일 수정&lt;/li&gt;
&lt;li&gt;프로젝트의 가상 인스턴스 시작&lt;/li&gt;
&lt;li&gt;가상 이미지 접속 및 작업&lt;/li&gt;
&lt;li&gt;가상 이미지 종료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vagrant는 프로젝트를 생성하기 앞서 여러 프로젝트가 공통적으로 사용할 Box를 다운로드합니다.
Box란 Vagrant에서 가상 이미지로 사용할 수 있도록 초기 설정된 바이너리 입니다.
Vagrant의 메인 개발사인 hashicorp는 여러 운영체제로 만든 Box를 제공합니다.
hasicorp의 &amp;ldquo;Atlas box catalog&amp;rdquo;에서 Box를 검색하고 다운로드 할 수 있습니다.
Box를 검색하고 다운로드를 지원하는 &amp;ldquo;Atlas box catalog&amp;rdquo;의 URL은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/atlas.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Atlas box catalog&amp;rdquo; 혹은 Box의 URL을 파라미터로 &amp;ldquo;vagrant box add&amp;rdquo; 명령을 이용하여 Box를 다운로드 할 수 있습니다.
다운받은 기본 Box는 ~/vagrant.d/boxes 디렉터리에 저장됩니다.
이 디렉터리에 위치한 각 Box는 프로바이더 별로 디렉터리를 구분하여 저장되며, 각 프로바이더 폴더에는 4개의 파일이 저장되어 있는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;taewan:demo taewan$ vagrant box add  ubuntu/trusty64
==&amp;gt; box: Loading metadata for box &#39;ubuntu/trusty64&#39;
    box: URL: https://atlas.hashicorp.com/ubuntu/trusty64
==&amp;gt; box: Adding box &#39;ubuntu/trusty64&#39; (v20160206.0.0) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20160206.0.0/providers/virtualbox.box
==&amp;gt; box: Successfully added box &#39;ubuntu/trusty64&#39; (v20160206.0.0) for &#39;virtualbox&#39;!
taewan:demo taewan$ vagrant box list
ubuntu/trusty64 (virtualbox, 20160206.0.0)
taewan:demo taewan$ 
taewan:demo taewan$ ls -al ~/.vagrant.d/boxes/
total 0
drwxr-xr-x  3 taewan  staff  102  2 10 00:00 .
drwxr-xr-x  9 taewan  staff  306  2 10 00:00 ..
drwxr-xr-x  4 taewan  staff  136  2 10 00:00 ubuntu-VAGRANTSLASH-trusty64
taewan:demo taewan$ tree ~/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64/
/Users/taewan/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64/
├── 20160206.0.0
│   └── virtualbox
│       ├── Vagrantfile
│       ├── box-disk1.vmdk
│       ├── box.ovf
│       └── metadata.json
└── metadata_url

2 directories, 5 files
taewan:demo taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant는 가상 이미지 관리하기 위해서 프로젝트를 만듭니다.
각 프로젝트의 최상위 디렉터리에는 Vagrantfile 파일이 위치합니다.
이 파일은 Vagrant로 관리되는 가상 이미지 설정을 포함합니다.&lt;/p&gt;

&lt;p&gt;프로젝트 최상위 디텍터리에서 &amp;ldquo;vagrant up&amp;rdquo; 명령을 최초로 실행하면 vagrant는 &amp;ldquo;~/vagrant.d/boxes&amp;rdquo;에 위치한 box 이미지를 복사하여 지정된 프로바이더에 맞는 가상 이미지를 생성하고 Guest OS를 실행합니다.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-5분-실습:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 5분 실습&lt;/h2&gt;

&lt;p&gt;Vagrant로 CentOS 가상 인스턴스를 만들고 로그인하여 사용하는 간단한 데모를 진행하겠습니다.&lt;/p&gt;

&lt;h3 id=&#34;box-이미지-카탈로그-조회:47d9242757fa168a76ca0788ab673199&#34;&gt;Box 이미지 카탈로그 조회&lt;/h3&gt;

&lt;p&gt;현재 호스트 머신에 설치된 Box이미지의 목록을 조회합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;demo taewan$ vagrant box list
ubuntu/trusty64 (virtualbox, 20160206.0.0)
demo taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;현재 호스트 머신에는 CentOS 이미지가 없는 것을 확인 할 수 있습니다.
&amp;ldquo;Atlas box catalog&amp;rdquo;에서 CentOS를 검색합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://taewan.kim/images/vagrant/box_catalog_centos.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;위 검색 결과에서 &amp;ldquo;centos/7&amp;rdquo;을 사용할 것을 결정합니다.&lt;/p&gt;

&lt;h3 id=&#34;box-이미지-다운로드:47d9242757fa168a76ca0788ab673199&#34;&gt;Box 이미지 다운로드&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;vagrant box add&amp;rdquo; 명령으로 앞으로 사용할 CentOS 기본 이미지를 다운로드 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;demo taewan$ vagrant box add centos/7
==&amp;gt; box: Loading metadata for box &#39;centos/7&#39;
    box: URL: https://atlas.hashicorp.com/centos/7
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) libvirt
2) virtualbox

Enter your choice: 2
==&amp;gt; box: Adding box &#39;centos/7&#39; (v1509.01) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/centos/boxes/7/versions/1509.01/providers/virtualbox.box
==&amp;gt; box: Successfully added box &#39;centos/7&#39; (v1509.01) for &#39;virtualbox&#39;!
demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치가 완료되면 &amp;ldquo;vagrant box list&amp;rdquo;명령으로 설치 결과를 확인할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;demo taewan$ vagrant box list
centos/7        (virtualbox, 1509.01)
ubuntu/trusty64 (virtualbox, 20160206.0.0)
demo taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-프로젝트-생성-및-설정-파일-확인:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 프로젝트 생성 및 설정 파일 확인&lt;/h3&gt;

&lt;p&gt;Vagrant 프로젝트를 생성할 디렉터리를 생성한 후 Vagrant 프로젝트 초기화를 수행합니다.
프로젝트 초기화 명령(vagrant init)을 실행할 때 사용할 box를 지정할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ pwd
/Users/taewan/workspace
workspace taewan$ vagrant init centos/7
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
workspace taewan$ ls
Vagrantfile
workspace taewan$ tree
.
└── Vagrantfile

0 directories, 1 file
workspace taewan$ cat Vagrantfile 
# 주석 제거
Vagrant.configure(2) do |config|
  config.vm.box = &amp;quot;centos/7&amp;quot;
end
workspace taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-가상-이미지-실행-및-ssh-접근:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 가상 이미지 실행 및 ssh 접근&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;vagrant up&amp;rdquo;명령으로 가상 이미지를 실행하고 &amp;ldquo;vagrant ssh&amp;rdquo;명령으로 가상 이미지에 ssh 접근이 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ vagrant up
Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; default: Importing base box &#39;centos/7&#39;...
==&amp;gt; default: Matching MAC address for NAT networking...
==&amp;gt; default: Checking if box &#39;centos/7&#39; is up to date...
==&amp;gt; default: Setting the name of the VM: workspace_default_1455162125926_16977
==&amp;gt; default: Clearing any previously set network interfaces...
==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==&amp;gt; default: Forwarding ports...
    default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: 
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default: 
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it&#39;s present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; default: Machine booted and ready!
==&amp;gt; default: Checking for guest additions in VM...
    default: No guest additions were detected on the base box for this VM! Guest
    default: additions are required for forwarded ports, shared folders, host only
    default: networking, and more. If SSH fails on this machine, please install
    default: the guest additions and repackage the box to continue.
    default: 
    default: This is not an error message; everything may continue to work properly,
    default: in which case you may ignore this message.
==&amp;gt; default: Installing rsync to the VM...
==&amp;gt; default: Rsyncing folder: /Users/taewan/workspace/ =&amp;gt; /home/vagrant/sync
workspace taewan$ vagrant ssh
[vagrant@localhost ~]$ uname -a
Linux localhost.localdomain 3.10.0-229.14.1.el7.x86_64 #1 SMP Tue Sep 15 15:05:51 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
workspace taewan$  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh-config-파일-수정:47d9242757fa168a76ca0788ab673199&#34;&gt;ssh config 파일 수정&lt;/h3&gt;

&lt;p&gt;간편한 접근을 위하여 vagant는 ssh config 설정을 제공하는 명령을 제공합니다.
&amp;ldquo;vagrant ssh-config &amp;ndash;host [hostname]&amp;rdquo; 명령으로 ssh config를 위한 내용을 확인할 수 있습니다.
이 결과는 리다이렉션을 이용하여 ~/.ssh/config에 적용할 수 있습니다.
ssh config가 적용된 이후에는 ssh [hostname]으로 접근 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ # ssh config 설정 확인
workspace taewan$ vagrant ssh-config --host demo 
Host demo
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile &amp;quot;/Users/taewan/workspace/.vagrant/machines/default/virtualbox/private_key&amp;quot;
  IdentitiesOnly yes
  LogLevel FATAL

workspace taewan$ # ssh config 적용
workspace taewan$ vagrant ssh-config --host demo &amp;gt;&amp;gt; ~/.ssh/config
workspace taewan$ # ssh 접근
workspace taewan$ ssh demo
Last login: Wed Feb 10 22:43:45 2016 from 10.0.2.2
[vagrant@localhost ~]$ uname -a
Linux localhost.localdomain 3.10.0-229.14.1.el7.x86_64 #1 SMP Tue Sep 15 15:05:51 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
workspace taewan$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-상태-확인-및-종료:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 상태 확인 및  종료&lt;/h3&gt;

&lt;p&gt;다음 명령으로 Vagrant 인스턴스의 상태를 확인하고 종료할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace taewan$ # 인스턴스 상태 확인
workspace taewan$ vagrant status
Current machine states:

default                   running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
workspace taewan$ # 인스턴스 종료
workspace taewan$ vagrant destroy
    default: Are you sure you want to destroy the &#39;default&#39; VM? [y/N] y
==&amp;gt; default: Forcing shutdown of VM...
==&amp;gt; default: Destroying VM and associated drives...
workspace taewan$ # 인스턴스 상태 확인
workspace taewan$ vagrant status
Current machine states:

default                   not created (virtualbox)

The environment has not yet been created. Run `vagrant up` to
create the environment. If a machine is not created, only the
default provider will be shown. So if a provider is not listed,
then the machine is not created for that environment.
taewanui-MacBook-Pro:workspace taewan$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;동영상-데모-vagrant-quick-start-4min:47d9242757fa168a76ca0788ab673199&#34;&gt;동영상 데모 - Vagrant Quick-Start (4min)&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/K2OFxx4n79w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h2 id=&#34;vagrant-명령-요약:47d9242757fa168a76ca0788ab673199&#34;&gt;Vagrant 명령 요약&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;vagrant -v : 버전 확인&lt;/li&gt;
&lt;li&gt;vagrant status : 현재 프로젝트의 가상 이미지 상태 요약&lt;/li&gt;
&lt;li&gt;vagrant global-status : 호스트 머신 전체의 Vagrant 가상 이미지들의 상태 확인&lt;/li&gt;
&lt;li&gt;vagrant up : Vagrant 가상 이미지 시작&lt;/li&gt;
&lt;li&gt;vagrant halt : 가상 인스턴스 강제 종료&lt;/li&gt;
&lt;li&gt;vagrant destroy : 가상 이미지 종료 및 기존 이미지 삭제&lt;/li&gt;
&lt;li&gt;vagrant suspend : 가상 인스턴스 하이버네이트, 상태 보존&lt;/li&gt;
&lt;li&gt;vagrant resume : 중지된 인스턴스 시작&lt;/li&gt;
&lt;li&gt;vagrant reload : 변경된 VagrantFile 적용&lt;/li&gt;
&lt;li&gt;vagrant ssh : 현재 프로젝트의 가상 이미지에 ssh 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference:47d9242757fa168a76ca0788ab673199&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/wpscholar/a49594e2e2b918f4d0c4&#34;&gt;https://gist.github.com/wpscholar/a49594e2e2b918f4d0c4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34;&gt;https://www.vagrantup.com/docs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant를 이용한 개발 환경 구성</title>
      <link>http://taewan.kim/blog/2015/02/01/vagrant_introduction/</link>
      <pubDate>Sun, 01 Feb 2015 18:04:41 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2015/02/01/vagrant_introduction/</guid>
      <description>

&lt;p&gt;Vagrant는 가상화 인스턴스인 Virtual Machine(VM)을 관리하는 소프트웨어입니다.
Vagrant는 &amp;ldquo;부랑자&amp;rdquo;/&amp;ldquo;정처없는 사람&amp;rdquo; 이라는 사전적인 의미를 갖습니다.
Vagrant는 가상화 이미지를 효과적으로 만들고 테스트하는 유연한 환경이라는 의미로 명명된 것으로 생각됩니다.
앞에서 설명한 것 처럼 Vagrant는 VM을 관리하는 소프트웨어로 여러 가상화 기술을 지원는 고수준 래퍼라고 할 수 있습니다.&lt;br /&gt;
Vagrant가 provider로 지원하는 기술은 다음과 같습니다.
- VirtualBox
- Vmware
- KVM
- Linux Container&lt;/p&gt;

&lt;p&gt;Vagrant의 개발 언어는 루비이며 2016.01 현재 최신 버전은 1.8입니다.
Vagrant는 초기에 VirtualBox를 근간으로 만들어 졌습니다.
여기에 버전 1.1부터 VMware와 KVM이 추가되었고, 버전 1.6에서는 Docker 컨테이너가 추가되었습니다.
Vagrant가 여러 Provider를 지원하기는 하지만, 여전히 기본 Provider는 VirtualBox입니다.&lt;/p&gt;

&lt;p&gt;Vagrant가 갖는 주요 특징은 다음과 같습니다.
* VM의 라이프사이클을 지원하면 간단한 CLI(Command-line Interface) 유틸리티
* VirtualBox기반으로 가상 머신 생성 자동화
* Chef와 Puppet을 사용한 프로비저닝 지원
* SSH 완전 지원
* VM에 고정 IP 할당 가능
* 호스트 머신에 포트 포워드 지원
* box로 이미지 배포
* 단일 명령으로 가상 머신을 완전히 리빌드&lt;/p&gt;

&lt;h2 id=&#34;vagrant-설치:5df5018d6687eb59ab586ab578cca973&#34;&gt;Vagrant 설치&lt;/h2&gt;

&lt;h2 id=&#34;quick-start-in-5-minute:5df5018d6687eb59ab586ab578cca973&#34;&gt;Quick Start in 5 Minute&lt;/h2&gt;

&lt;h2 id=&#34;vagrant-명령어-요약:5df5018d6687eb59ab586ab578cca973&#34;&gt;vagrant 명령어 요약&lt;/h2&gt;

&lt;h2 id=&#34;vagrantfile성-설정하기:5df5018d6687eb59ab586ab578cca973&#34;&gt;VagrantFile성 설정하기&lt;/h2&gt;

&lt;p&gt;###
###
###
###
###
###&lt;/p&gt;

&lt;h2 id=&#34;reference:5df5018d6687eb59ab586ab578cca973&#34;&gt;Reference&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;설치
    - virtualbox 설치
    - vagrant 설치&lt;/p&gt;

&lt;p&gt;gem install vagrant
vagrant box add lucid32 http://&amp;hellip;&amp;hellip;.box
vagrant init
vagrant up&lt;/p&gt;

&lt;p&gt;&amp;mdash;&amp;mdash;-getting started &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
* Vagrant가 virtualbox를 선호하는 이유
    * Just Free
    * 주요 플랫폼
    * Vagrant에 빌트-인 되어 있음&lt;/p&gt;

&lt;p&gt;vagrant init bashincorp/predics64
vagrant up
vagrant ssh&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Ubuntu 12.04 LTS 64-bit&amp;rdquo; 가상화 구성 완료&lt;/li&gt;
&lt;li&gt;vagrant ssh&lt;/li&gt;
&lt;li&gt;vagrant destroy&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;vagrant-설정-vagrantfile:5df5018d6687eb59ab586ab578cca973&#34;&gt;Vagrant 설정: Vagrantfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vagrantfile 을 초기화하는 명령&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vagrant init&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Boxes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vagrant가 빠른 가상머신 복제를 위해 사용하는 기본 이미지&lt;/li&gt;
&lt;li&gt;Vagrantfile에 사용할 box를 지정함&lt;/li&gt;
&lt;li&gt;모든 프로젝트는 Box의 초기 이미지를 클론하여 사용&lt;/li&gt;
&lt;li&gt;원본 이미지를 수정하지 않음&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Box 설치&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vagrant box add hashicorp/precise64&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search에서&#34;&gt;https://atlas.hashicorp.com/boxes/search에서&lt;/a&gt; 다운로드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;설정:5df5018d6687eb59ab586ab578cca973&#34;&gt;설정&lt;/h2&gt;

&lt;p&gt;Vagrant.configure(&amp;ldquo;2&amp;rdquo;) do |config|
  config.vm.box = &amp;ldquo;hashicorp/precise64&amp;rdquo;
end&lt;/p&gt;

&lt;p&gt;HashiCorp&amp;rsquo;s Atlas box catalog: &lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;
bento&lt;/p&gt;

&lt;p&gt;vagrant up
vagrant ssh
vagrant destory box 이미지를 제거하지 않음
vagrant box remove&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;동기화-폴더:5df5018d6687eb59ab586ab578cca973&#34;&gt;동기화 폴더&lt;/h2&gt;

&lt;p&gt;/vagrant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
$ vagrant ssh
vagrant@precise64:~$ ls /vagrant
Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;vagrant@precise64:~$ touch /vagrant/foo
vagrant@precise64:~$ exit
$ ls
foo Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;
 
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &amp;quot;precise32&amp;quot;
  config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise32.box&amp;quot;
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  # config.vm.network :private_network, ip: &amp;quot;192.168.33.10&amp;quot;
  # config.vm.network :public_network
  # config.ssh.forward_agent = true
  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vm|
        vm.customize [
               &amp;quot;modifyvm&amp;quot;,:id,
               &amp;quot;--memory&amp;quot;,&amp;quot;512&amp;quot;,
               &amp;quot;--name&amp;quot;,&amp;quot;Terry_vagrant0&amp;quot;,
               &amp;quot;--cpus&amp;quot;,&amp;quot;2&amp;quot;,
                       ]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;shared-folder:5df5018d6687eb59ab586ab578cca973&#34;&gt;shared folder&lt;/h2&gt;

&lt;p&gt;vagrant@precise64:~$ touch /vagrant/foo
vagrant@precise64:~$ exit
$ ls
foo Vagrantfile&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;provisioning:5df5018d6687eb59ab586ab578cca973&#34;&gt;provisioning&lt;/h2&gt;

&lt;p&gt;#!/usr/bin/env bash&lt;/p&gt;

&lt;p&gt;apt-get update
apt-get install -y apache2
if ! [ -L /var/www ]; then
  rm -rf /var/www
  ln -fs /vagrant /var/www&lt;/p&gt;

&lt;h2 id=&#34;fi:5df5018d6687eb59ab586ab578cca973&#34;&gt;fi&lt;/h2&gt;

&lt;p&gt;Vagrant.configure(&amp;ldquo;2&amp;rdquo;) do |config|
  config.vm.box = &amp;ldquo;hashicorp/precise64&amp;rdquo;
  config.vm.provision :shell, path: &amp;ldquo;bootstrap.sh&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;end:5df5018d6687eb59ab586ab578cca973&#34;&gt;end&lt;/h2&gt;

&lt;p&gt;vagrant 파일 기준 상대 경로&lt;/p&gt;

&lt;p&gt;vagrant reload &amp;ndash;provision&lt;/p&gt;

&lt;p&gt;Configuration of communications between VMs&lt;/p&gt;

&lt;p&gt;Vagrant는
- VirtualBox
- VMWare
- AWS&lt;/p&gt;

&lt;p&gt;Provider를 설치한 후
$ vagrant up &amp;ndash;provider=vmware_fusion
$ vagrant up &amp;ndash;provider=aws
&amp;ldquo;vagrant up&amp;rdquo;에서만 provider를 지정하면 옵션을 사용합니다.
다른 vagrant 명령에서는 provider를 별도로 지정할 필요가 없습니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>