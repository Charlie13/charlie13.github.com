<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on taewan&#39;s blog</title>
    <link>http://taewan.kim/categories/javascript.html</link>
    <description>Recent content in Javascript on taewan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Oct 2016 21:28:14 +0900</lastBuildDate>
    <atom:link href="http://taewan.kim/categories/javascript.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>자바스크립트 함수형 프로그래밍 연습 - Table 테그 레퍼</title>
      <link>http://taewan.kim/blog/2016/10/18/functional_javascript/</link>
      <pubDate>Tue, 18 Oct 2016 21:28:14 +0900</pubDate>
      
      <guid>http://taewan.kim/blog/2016/10/18/functional_javascript/</guid>
      <description>&lt;p&gt;최근에 함수형 언어을 다른 시각에서 접근한다는 취지로 &amp;ldquo;&lt;a href=&#34;http://www.hanbit.co.kr/store/books/look.php?p_code=B9124201558&#34;&gt;함수형 자바스크립트 : 새롭고 올바른 자바스크립트 프로그래밍 기법&lt;/a&gt;&amp;ldquo;을 보고 있습니다. (기존에는 Scala를 중심으로 함수형을 접근했습니다.) 이 책의 4장까지의 내용을 기초로 테이블 테그 래퍼를 작성해 보았습니다.&lt;/p&gt;

&lt;p&gt;이 책에서는 함수형을 지원하기 위해서 underscore.js를 사용하고 있지만, ES6는 함수형의 핵심 함수들을 대부분 포함하고 있습니다.&lt;/p&gt;

&lt;p&gt;첫번째 구현체를 ES6 코드로 작성해 보았습니다.&lt;/p&gt;

&lt;p&gt;코드를 리뷰해 주신 분의 의견은 &amp;ldquo;함수형을 빙지한 순차적 프로그래밍이다&amp;rdquo;라는 리뷰를 받았습니다.
함수형 코드를 모방한 함수를 사용하기는 했지만 지역변수가 존재하고 제어문이 그대로 노출되는 문제를 안고 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그림 1. 첫번째 구현체 (초기 버전)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://minsupapa.github.io/javascript/functional_practice/fig01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이 부분을 다시 구현해 보았습니다. 주안점을 둔 부분은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;제어문을 제거&lt;/li&gt;
&lt;li&gt;지역 변수를 사용 금지&lt;/li&gt;
&lt;li&gt;배열 검증&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ES6 기반 코드&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;그림 2. 두번째 구현체 수정 코드&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://minsupapa.github.io/javascript/functional_practice/fig02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;함수형 코드를 사용함에 있어서 장점은..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;코드의 재사용성이 높아짐&lt;/li&gt;
&lt;li&gt;재사용성을 높이는 Generic 함수 드지안이 가능&lt;/li&gt;
&lt;li&gt;코드이 가독성이 높아짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 특징을 볼 수 있는것 같습니다.
그러나 너무 어렵네요&amp;hellip;.&lt;/p&gt;

&lt;p&gt;다음은 두 번째 코드입니다.
아직은 연습하는 입장에서 문제가 많은니다.&lt;/p&gt;

&lt;p&gt;다양한 리뷰 부탁드립니다.
스칼라를 주로 사용하다가 자바스크립트로 함수형 프로그래밍을 해보니 역시 힘드네요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;wrapper = function(tag){
    return function(v){return &#39;&amp;lt;&#39; + tag + &#39;&amp;gt;&#39; + v + &#39;&amp;lt;/&#39; + tag + &#39;&amp;gt;&#39;;};
}

initArr = function(arr){
    return Array.isArray(arr) ? arr : []
}


var people = [
  [&#39;김민수&#39;,&#39;3&#39;,&#39;아들&#39;],
  [&#39;임선영&#39;,&#39;39&#39;,&#39;엄마&#39;],
  [&#39;김태완&#39;,&#39;43&#39;,&#39;아빠&#39;]
];
var labels = [&#39;이름&#39;,&#39;나이&#39;,&#39;비고&#39;];


tableGen = function(matrix, head, wrapfun){
    const tr = wrapfun(&#39;tr&#39;);
    const td = wrapfun(&#39;td&#39;);

    return wrapfun(&#39;table&#39;)(
        wrapfun(&#39;thead&#39;)(initArr(head).reduce( (p,c)=&amp;gt;p+td(c),&#39;&#39;)) +
        wrapper(&#39;tbody&#39;)(initArr(matrix).reduce( (p,c)=&amp;gt;p+tr(c.reduce((sp,sc)=&amp;gt;sp+td(sc),&#39;&#39;)),&#39;&#39;))
    );
}

var tbltag = tableGen(people, labels, wrapper)

$$html$$ = tbltag
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>