<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on taewan&#39;s blog</title>
    <link>http://taewan.kim/documents.html</link>
    <description>Recent content in Documents on taewan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Mar 2016 01:25:02 +0900</lastBuildDate>
    <atom:link href="http://taewan.kim/documents.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10.sets</title>
      <link>http://taewan.kim/documents/47degree4scala/10.sets.html</link>
      <pubDate>Thu, 31 Mar 2016 01:25:02 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/10.sets.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>08.lists</title>
      <link>http://taewan.kim/documents/47degree4scala/08.lists.html</link>
      <pubDate>Thu, 31 Mar 2016 01:24:45 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/08.lists.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>09.maps</title>
      <link>http://taewan.kim/documents/47degree4scala/09.maps.html</link>
      <pubDate>Thu, 31 Mar 2016 01:24:37 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/09.maps.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>07.highorder</title>
      <link>http://taewan.kim/documents/47degree4scala/07.highorder.html</link>
      <pubDate>Thu, 31 Mar 2016 01:23:46 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/07.highorder.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>06.tuples</title>
      <link>http://taewan.kim/documents/47degree4scala/06.tuples.html</link>
      <pubDate>Thu, 31 Mar 2016 01:23:30 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/06.tuples.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>05.objects</title>
      <link>http://taewan.kim/documents/47degree4scala/05.objects.html</link>
      <pubDate>Thu, 31 Mar 2016 01:23:10 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/05.objects.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>04.options</title>
      <link>http://taewan.kim/documents/47degree4scala/04.options.html</link>
      <pubDate>Thu, 31 Mar 2016 01:22:51 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/04.options.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>03.classes</title>
      <link>http://taewan.kim/documents/47degree4scala/03.classes.html</link>
      <pubDate>Thu, 31 Mar 2016 01:22:41 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/03.classes.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>02.valandvar</title>
      <link>http://taewan.kim/documents/47degree4scala/02.valandvar.html</link>
      <pubDate>Thu, 31 Mar 2016 01:22:23 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/02.valandvar.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>01. asserts</title>
      <link>http://taewan.kim/documents/47degree4scala/01.asserts.html</link>
      <pubDate>Thu, 31 Mar 2016 01:21:52 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degree4scala/01.asserts.html</guid>
      <description>

&lt;h1 id=&#34;단정-함수:28be12209e2f94f4a685e9d6518a6d60&#34;&gt;단정 함수&lt;/h1&gt;

&lt;p&gt;ScalaTest는 3개의 단정문을 제공하며, 이 단정문은 모든 trait에서 기본적으로 사용 가능하다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assert: 범용적 단정문&lt;/li&gt;
&lt;li&gt;assertResult: 실제 값과 예상 값을 식별&lt;/li&gt;
&lt;li&gt;intercept: 코드가 예고한 예외를 던지는 것을 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모든 스칼라 프로그램에서 assert 메서드를 호출 할 수 있다. 이 메서드는 Boolean형을 파라미터로 취한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val left = 2
val right = 1
assert(left == right)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;전단한 표현식의 true이면 assert 메서드는 정상적으로 종료되지만, 반대로 false라면 assert 메서드는 AssertionError를 발생시키고 종료될 것이다. 이렇게 동작하는 assert 메서드는 Predef 객체에 정의되어 있다. Predef에 정의된 모든 멤버는 명시적으로 임포트하지 않아서 모든 스칼라 소스 파일이 기본적으로 임포트된다.&lt;/p&gt;

&lt;p&gt;ScalaTest는 DSL(Domain Specific Language)를 제공한다. 이 DSL을 사용하여 &amp;ldquo;should&amp;rdquo; 같은 단어를 사용하여 단정문을 표현 할 수 있다. ScalaTest의 동일성을 체크하는 다섯가지 방법을 제공한다. 이 각각의 방법은 각각 다른 요구사항을 해결하기 위해서 디자인 되었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;result should equal (3) // Equality를 커스터마이징 할 수 있음
result should === (3)   // Equality를 커스터마이징 하고 타입 제약을 강제함
result should be (3)    // Equality를 커스터마이징 할 수 없음. 따라서 컴파일이 가장 빠름
result shouldEqual 3    // Equality를 커스터마이징 할 수 있음. 괄호가 필요 없음
result shouldBe 3       // Equality를 커스터마이징 할 수 없음. 따라서 컴파일이 가장 빠름. 괄호 필요 없음
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>problem 01</title>
      <link>http://taewan.kim/documents/prolog99/problem-01.html</link>
      <pubDate>Fri, 25 Mar 2016 18:00:54 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/prolog99/problem-01.html</guid>
      <description>

&lt;h2 id=&#34;현재-상태:ae225dbb0108137226a4721d51b6129f&#34;&gt;현재 상태&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2016-03-25: 풀이 중&lt;/li&gt;
&lt;li&gt;2016-03-25: 1/2번 풀이 종료&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;문제:ae225dbb0108137226a4721d51b6129f&#34;&gt;문제&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;리스트의 마지막 엘리먼트를 구하시오?&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; last(List(1, 1, 2, 3, 5, 8))
res0: Int = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;풀이:ae225dbb0108137226a4721d51b6129f&#34;&gt;풀이&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;단순 풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object P01 {
  def last[A](list:List[A]):A=list.last
}

import P01._

var result = last(List(1, 2, 3, 4, 5, 6))
println(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;재귀방식 풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object P01R{
  @tailrec
  def last[A](list:List[A]):A = list match {
    case h::Nil =&amp;gt; h
    case _::tail  =&amp;gt; last(tail)
    case _ =&amp;gt; throw new NoSuchElementException
  }
}

import P01R._

var result = last(List(1,2,1,1,2,3,4,5))
println(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/Problem-NintyNine4Scala.html&#34;&gt;&amp;ldquo;Prolog99 for scala&amp;rdquo; 돌아가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>problem 02</title>
      <link>http://taewan.kim/documents/prolog99/problem-02.html</link>
      <pubDate>Fri, 25 Mar 2016 18:00:54 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/prolog99/problem-02.html</guid>
      <description>

&lt;h2 id=&#34;현재-상태:29792a39170f4e52c3470154bba77043&#34;&gt;현재 상태&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2016-03-27: 문서 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;문제:29792a39170f4e52c3470154bba77043&#34;&gt;문제&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;리스트의 끝에서 두번째 엘리먼트를 구하시오?

&lt;ul&gt;
&lt;li&gt;예제 코드
&lt;code&gt;scala
scala&amp;gt; penultimate(List(1, 1, 2, 3, 5, 8))
res0: Int = 5
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;풀이:29792a39170f4e52c3470154bba77043&#34;&gt;풀이&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;단순 풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object P02{
  def penultimate[A](list:List[A]):A = {
    return list(list.length-2)
  }
}

import P02._
penultimate(List(1, 1, 2, 3, 5, 8))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;재귀방식 풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object P01R{
  @tailrec
  def last[A](list:List[A]):A = list match {
    case h::Nil =&amp;gt; h
    case _::tail  =&amp;gt; last(tail)
    case _ =&amp;gt; throw new NoSuchElementException
  }
}

import P01R._

var result = last(List(1,2,1,1,2,3,4,5))
println(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/Problem-NintyNine4Scala.html&#34;&gt;&amp;ldquo;Prolog99 for scala&amp;rdquo; 돌아가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>문제풀이 준비중 입니다. </title>
      <link>http://taewan.kim/documents/prolog99/problem-NotYet.html</link>
      <pubDate>Fri, 25 Mar 2016 18:00:54 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/prolog99/problem-NotYet.html</guid>
      <description>

&lt;h2 id=&#34;현재-상태:57d6af03ea9fe044bddeefd2c80b5ec4&#34;&gt;현재 상태&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2016-03-29: 문서 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문제 풀이 준비 중 입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/Problem-NintyNine4Scala.html&#34;&gt;&amp;ldquo;Prolog99 for scala&amp;rdquo; 돌아가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Problem NintyNine for Scala</title>
      <link>http://taewan.kim/documents/Problem-NintyNine4Scala.html</link>
      <pubDate>Fri, 25 Mar 2016 17:57:42 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/Problem-NintyNine4Scala.html</guid>
      <description>

&lt;p&gt;prolog 학습 자료인 &amp;ldquo;P-99: Ninety-Nine Prolog Problems&amp;rdquo;의 스칼라 버전 입니다.
&amp;ldquo;P-99: Ninety-Nine Prolog Problems&amp;rdquo;는 Prolog의 학습을 지원하기 위한 연습문제 성격입니다.
Prolog버전의 연습문제를 Scala 버전으로 변경하여 제공하는 내용을 정리하는 페이지 입니다.
&amp;ldquo;P-99: Ninety-Nine Prolog Problems&amp;rdquo;은 홈페이지는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/prologsite/prolog-problems&#34;&gt;https://sites.google.com/site/prologsite/prolog-problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;P-99: Ninety-Nine Prolog Problems&amp;rdquo;은 7개 카테고리로 구성되며, 스칼라 버전의 변환은
aperiodic.net을 참조하여 정리하였습니다.&lt;/p&gt;

&lt;h2 id=&#34;해당-문제의-답안은-문제-번호에-설정된-링크로-확인-할-수-있습니다:08dbffc5775114b4d4832a173849c143&#34;&gt;해당 문제의 답안은 문제 번호에 설정된 링크로 확인 할 수 있습니다.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;카테고리 구성

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#list&#34;&gt;List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arithmetic&#34;&gt;Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logic&#34;&gt;Logic and Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binarytrees&#34;&gt;Binary Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiwaytrees&#34;&gt;Multiway Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphs&#34;&gt;Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;list&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-list:08dbffc5775114b4d4832a173849c143&#34;&gt;1. List&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/prolog99/problem-01.html&#34;&gt;S-01&lt;/a&gt;: 리스트의 마지막 엘리먼트를 구하시오?

&lt;ul&gt;
&lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; last(List(1, 1, 2, 3, 5, 8))
res0: Int = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/prolog99/problem-02.html&#34;&gt;S-02&lt;/a&gt;: 리스트의 끝에서 두번째 엘리먼트를 구하시오?

&lt;ul&gt;
&lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; penultimate(List(1, 1, 2, 3, 5, 8))
res0: Int = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/prolog99/problem-NotYet.html&#34;&gt;S-03&lt;/a&gt;: 리스트의 k번째 엘리먼트를 구하시오?

&lt;ul&gt;
&lt;li&gt;리스트의 첫 번째 엘리먼트는 0.&lt;/li&gt;
&lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; nth(2, List(1, 1, 2, 3, 5, 8))
res0: Int = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/prolog99/problem-NotYet.html&#34;&gt;S-04&lt;/a&gt;: 리스트의 엔리먼트 사이즈를 구하시오?

&lt;ul&gt;
&lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; length(List(1, 1, 2, 3, 5, 8))
res0: Int = 6
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://taewan.kim/documents/prolog99/problem-NotYet.html&#34;&gt;S-05&lt;/a&gt;: 리스트를 리버스로 변환하시오?

&lt;ul&gt;
&lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; reverse(List(1, 1, 2, 3, 5, 8))
res0: List[Int] = List(8, 5, 3, 2, 1, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;arithmetic&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-arithmetic:08dbffc5775114b4d4832a173849c143&#34;&gt;2. Arithmetic&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;logic&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-logic:08dbffc5775114b4d4832a173849c143&#34;&gt;3. Logic&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;binarytrees&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-binary-trees:08dbffc5775114b4d4832a173849c143&#34;&gt;4. Binary Trees&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;multiwaytrees&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-multiway-trees:08dbffc5775114b4d4832a173849c143&#34;&gt;5. Multiway Trees&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;graphs&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-graphs:08dbffc5775114b4d4832a173849c143&#34;&gt;6. Graphs&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&#34;miscellaneous&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-miscellaneous:08dbffc5775114b4d4832a173849c143&#34;&gt;7. Miscellaneous&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>[47 Degrees] scala exercises</title>
      <link>http://taewan.kim/documents/47degrees4scala.html</link>
      <pubDate>Fri, 20 Mar 2015 11:49:56 +0900</pubDate>
      
      <guid>http://taewan.kim/documents/47degrees4scala.html</guid>
      <description>

&lt;p&gt;47 Degrees(47deg.com)에서 운영하는 Scala Exercise(&lt;a href=&#34;http://scala-exercises.47deg.com/)에&#34;&gt;http://scala-exercises.47deg.com/)에&lt;/a&gt; 대한 정리입니다. Scala Exercise는 42개 목록으로 구성되어 있습니다. 각 타이틀에 대한 번역과 코드를 별도 프로젝트로 정리하겠습니다. 각 항목에 대한 정리 내용은 현재 페이지에서 링크로 정리하겠습니다.&lt;/p&gt;

&lt;h2 id=&#34;scala-exercise:9020bfc57ece2aa04d15d84b97c920a4&#34;&gt;Scala Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Assets

&lt;ul&gt;
&lt;li&gt;번역:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Val and Var&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Options&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;High Order Functions&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Formatting&lt;/li&gt;
&lt;li&gt;Pattern Matching&lt;/li&gt;
&lt;li&gt;Case Classes&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Partially Applied Functions&lt;/li&gt;
&lt;li&gt;Implicits&lt;/li&gt;
&lt;li&gt;Traits&lt;/li&gt;
&lt;li&gt;For Expressions&lt;/li&gt;
&lt;li&gt;Infix, Prefix and Postfix&lt;/li&gt;
&lt;li&gt;Operators&lt;/li&gt;
&lt;li&gt;Infix Types&lt;/li&gt;
&lt;li&gt;Mutable Maps&lt;/li&gt;
&lt;li&gt;Mutable Sets&lt;/li&gt;
&lt;li&gt;Sequences and Arrays&lt;/li&gt;
&lt;li&gt;Iterables&lt;/li&gt;
&lt;li&gt;Traversables&lt;/li&gt;
&lt;li&gt;Named and Default Arguments&lt;/li&gt;
&lt;li&gt;Mainfests&lt;/li&gt;
&lt;li&gt;Preconditions&lt;/li&gt;
&lt;li&gt;Extrators&lt;/li&gt;
&lt;li&gt;ByName Parameter&lt;/li&gt;
&lt;li&gt;Repeated Parameters&lt;/li&gt;
&lt;li&gt;Parent Classes&lt;/li&gt;
&lt;li&gt;Empty Values&lt;/li&gt;
&lt;li&gt;Type Signatures&lt;/li&gt;
&lt;li&gt;Uniform Access Principle&lt;/li&gt;
&lt;li&gt;Literal Booleans&lt;/li&gt;
&lt;li&gt;Literal Numbers&lt;/li&gt;
&lt;li&gt;Literal Strings&lt;/li&gt;
&lt;li&gt;Type Variance&lt;/li&gt;
&lt;li&gt;Enumerations&lt;/li&gt;
&lt;li&gt;Constructions&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>